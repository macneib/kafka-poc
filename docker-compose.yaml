version: '2'
services:
  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION}
    ports:
     - 2181:2181
     - 2888:2888
     - 3888:3888
  kafka:
    image: debezium/kafka:${DEBEZIUM_VERSION}
    ports:
     - 9092:9092
    links:
     - zookeeper
    environment:
     - ZOOKEEPER_CONNECT=zookeeper:2181
  mysql:
    image: debezium/example-mysql:${DEBEZIUM_VERSION}
    ports:
     - 3306:3306
    environment:
     - MYSQL_ROOT_PASSWORD=debezium
     - MYSQL_USER=mysqluser
     - MYSQL_PASSWORD=mysqlpw 
  # postgres:
  #   image: debezium/postgres:9.6
  #   ports:
  #    - "5432:5432"
  #   environment:
  #    - POSTGRES_USER=postgresuser
  #    - POSTGRES_PASSWORD=postgrespw
  #    - POSTGRES_DB=inventory
  # mssql:
  #   image: microsoft/mssql-server-linux:2017-CU9-GDR2
  #   ports:
  #    - 1433:1433
  #   environment:
  #    - ACCEPT_EULA=Y
  #    - MSSQL_PID=Standard
  #    - SA_PASSWORD=Password!
  #    - MSSQL_AGENT_ENABLED=true
  #   volumes:
  #     - ${PWD}/db/AdventureWorks2017.bak:/tmp/AdventureWorks2017.bak
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:6.8.1
  #   environment:
  #    - bootstrap.memory_lock=true
  #    - ELASTIC_PASSWORD=changeme
  #    - discovery.type=single-node
  #    - http.host=0.0.0.0
  #    - transport.host=127.0.0.1
  #    - cluster.routing.allocation.disk.threshold_enabled=false
  #    - xpack.security.enabled=false
  #    - xpack.ml.enabled=false
  #    - xpack.watcher.enabled=false
  #    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    # ulimits:
    #   memlock:
    #     soft: -1
    #     hard: -1
    # ports:
    #   - 9200
  # kibana:
  #   image: docker.elastic.co/kibana/kibana:6.8.1
  #   ports:
  #     - "5601:5601"
  #   environment:
  #    - http.host=0.0.0.0
  #    - transport.host=127.0.0.1
  #    - xpack.security.enabled=false
  #   depends_on:
  #    - elasticsearch
  #   links:
  #    - elasticsearch
  connect:
    image: debezium/connect-jdbc-es:${DEBEZIUM_VERSION}
    build:
      context: debezium-jdbc-es
    ports:
     - 8083:8083
     - 5005:5005
    links:
     - kafka
     - mysql
     #- mssql
     #- postgres
     #- elasticsearch
     - zookeeper
     - schema-registry
    environment:
     - BOOTSTRAP_SERVERS=kafka:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=my_connect_configs
     - OFFSET_STORAGE_TOPIC=my_connect_offsets
     - STATUS_STORAGE_TOPIC=my_connect_statuses
     - KEY_CONVERTER=io.confluent.connect.avro.AvroConverter
     - VALUE_CONVERTER=io.confluent.connect.avro.AvroConverter
     - INTERNAL_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
     - INTERNAL_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
     - CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
     - CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
  # Written and open sourced by Confluent, the Schema Registry for Apache Kafka enables
  # developers to define standard schemas for their events, share them across the
  # organization and safely evolve them in a way that is backward compatible and future proof.
  # https://www.confluent.io/confluent-schema-registry/
  schema-registry:
    image: confluentinc/cp-schema-registry:4.1.0
    hostname: schema-registry
    restart: unless-stopped
    ports:
     - 8181:8181
     - 8081:8081
    links:
      - zookeeper
    environment:
     - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
     - SCHEMA_REGISTRY_HOST_NAME=schema-registry
     - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081
    depends_on:
      - zookeeper
      - kafka

  # A web tool that allows you to create / view / search / evolve / view
  # history & configure Avro schemas of your Kafka cluster.
  # https://github.com/Landoop/schema-registry-ui
  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.4
    hostname: schema-registry-ui
    # schema-registry-ui binds to port 8000, but we are going to expose it on our local
    # machine on port 8001.
    ports:
      - "8001:8000"
    environment:
      # Required. Instructs the UI where it can find the schema registry.
      SCHEMAREGISTRY_URL: http://schema-registry:8081/
      # This instructs the docker image to use Caddy to proxy traffic to schema-registry-ui.
      PROXY: "true"
    # As this is a UI for Schema Registry, we rely upon Schema Registry. Docker will wait for
    # the schema-registry service to be up before staring schema-registry-ui.
    depends_on:
      - schema-registry

  # The Kafka REST Proxy provides a RESTful interface to a Kafka cluster.
  # It makes it easy to produce and consume messages, view the state
  # of the cluster, and perform administrative actions without using
  # the native Kafka protocol or clients.
  # https://github.com/confluentinc/kafka-rest
  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:4.1.0
    hostname: kafka-rest-proxy
    ports:
      - "8082:8082"
    environment:
      # Specifies the ZooKeeper connection string. This service connects
      # to ZooKeeper so that it can broadcast its endpoints as well as
      # react to the dynamic topology of the Kafka cluster.
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      # The address on which Kafka REST will listen for API requests.
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      # The base URL for Schema Registry that should be used by the Avro serializer.
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081/
      # Required. This is the hostname used to generate absolute URLs in responses.
      # It defaults to the Java canonical hostname for the container, which might
      # not be resolvable in a Docker environment.
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      # The list of Kafka brokers to connect to. This is only used for bootstrapping,
      # the addresses provided here are used to initially connect to the cluster,
      # after which the cluster will dynamically change. Thanks, ZooKeeper!
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:9092
    # Kafka REST relies upon Kafka, ZooKeeper, and Schema Registry.
    # This will instruct docker to wait until those services are up
    # before attempting to start Kafka REST.
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
  # Browse Kafka topics and understand what's happening on your cluster.
  # Find topics / view topic metadata / browse topic data
  # (kafka messages) / view topic configuration / download data.
  # https://github.com/Landoop/kafka-topics-ui
  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.3
    hostname: kafka-topics-ui
    ports:
      - "8000:8000"
    environment:
      # Required. Instructs the UI where it can find the Kafka REST Proxy.
      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
      # This instructs the docker image to use Caddy to proxy traffic to kafka-topics-ui.
      PROXY: "true"
    # kafka-topics-ui relies upon Kafka REST.
    # This will instruct docker to wait until those services are up
    # before attempting to start kafka-topics-ui.
    depends_on:
      - kafka-rest-proxy
  # This is a web tool for Kafka Connect for setting up and managing connectors for multiple connect clusters.
  # https://github.com/Landoop/kafka-connect-ui
  kafka-connect-ui:
    image: landoop/kafka-connect-ui:0.9.4
    hostname: kafka-connect-ui
    # kafka-connect-ui binds to port 8000, but we are going to expose it on our local
    # machine on port 8002.
    ports:
      - "8002:8000"
    environment:
      # Required. Instructs the UI where it can find Kafka Connect.
      CONNECT_URL: "http://connect:8083/"
      # This instructs the docker image to use Caddy to proxy traffic to kafka-connect-ui.
      PROXY: "true"
    # kafka-connect-ui relies upon Kafka Connect.
    # This will instruct docker to wait until those services are up
    # before attempting to start kafka-connect-ui.
    depends_on:
      - connect
  ksql-server:
    image: "confluentinc/cp-ksql-server:5.3.0"
    depends_on:
      - kafka
      - schema-registry
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  ksql-cli:
    image: confluentinc/cp-ksql-cli:5.1.0
    depends_on:
      - ksql-server
    entrypoint: /bin/sh
    tty: true
# Two options for getting dummy data in here, one calls out to a 
# test generator on the web, another uses a local file. 
# Both running isn't a problem, you'll just get twice the throughput.
  kafkacat:
    image: confluentinc/cp-kafkacat:latest
    depends_on:
      - kafka
# echo "Waiting for Kafka "
# cub kafka-ready -b kafka:29092 1 300 &&       
    command: 
      - bash 
      - -c 
      - |
        while [ 1 -eq 1 ]
          do awk '{print $$0;system("sleep 0.5");}' /data/txns.json | \
              kafkacat -b kafka:9092 -P -t purchases
          done
    volumes: 
      - $PWD/data:/data